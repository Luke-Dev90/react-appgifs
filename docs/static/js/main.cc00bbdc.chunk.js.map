{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,gDAEkCC,UAAUH,GAF5C,8DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAchBM,GAdgB,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECJwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPxB,EAASC,GACRwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGtB,CAACpB,IAEIqB,EDZuBK,CAAc1B,GAAhCa,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAGnB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,KAClDoB,GAAW,oBAAIJ,UAAU,mCAAd,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GAAD,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEalBgB,EA7BM,WAGjB,MAAoCzC,mBAAU,CAAC,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCfzB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cc00bbdc.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types' \r\n\r\nexport const AddCategory = ( {setCategories}) =>{\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit =  (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async( category) =>{\r\n        \r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=4&api_key=2CLlm0C9quusFSUDLEou4FiNvsTU8gut`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\nreturn gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url}) => {\r\n//    console.log(id,title,url)\r\n    return (\r\n        <div className=\"card animate__animated animate__backInLeft\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'; //{useState,useEffect}\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const {data:images,loading} = useFetchGifs( category);\r\n    \r\n  \r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__fadeIn\"> {category}</h2>\r\n            { loading && <h3 className=\"animate__animated animate__flash\">Loading</h3>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) =>\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img }\r\n                        />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {useEffect, useState} from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () =>{\r\n        getGifs( category)\r\n        .then(imgs => { \r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })   \r\n        })\r\n    },[category])\r\n\r\n    return state;\r\n}","import React,{useState} from \"react\";\r\nimport {AddCategory} from './components/AddCategory.js'\r\nimport {GifGrid} from './components/GifGrid'\r\nconst GitExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState( ['Samurai x'])\r\n  \r\n    \r\n    \r\n    return(\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            <hr/>\r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <ol>\r\n               { \r\n                categories.map( category => (\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category}/>\r\n                ))\r\n               }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp'\n\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}